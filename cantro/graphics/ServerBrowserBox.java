/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ChatClientConnectBox.java
 *
 * Created on Nov 21, 2010, 1:56:09 AM
 */

package cantro.graphics;
import java.awt.event.*;
import java.net.*;
import java.util.*;
import javax.swing.table.*;
import cantro.networking.*;
/**
 *
 * @author James
 */
public class ServerBrowserBox extends javax.swing.JDialog {

    public UDPListener udpListener;
    public Thread udpThread;
    public DatagramSocket udpSocket;
    public ArrayList<String> serverBrowserItems;


    /** Creates new form ChatClientConnectBox */
    public ServerBrowserBox(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        try
        {
            udpSocket = new DatagramSocket(4445);
        }
        catch(Exception e)
        {}
        udpListener = new UDPListener(this, udpSocket);
        udpThread = new Thread(udpListener);
        udpThread.setDaemon(true);
        udpThread.start();
        serverBrowserItems = new ArrayList<String>();
        jButton2.doClick();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    
    public void test()
    {
    	System.out.println("TESTINGLOL");
    }
    
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 200, 200));
        setName("Form"); // NOI18N

        //javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(chatclient.ChatClientApp.class).getContext().getActionMap(ChatClientConnectBox.class, this);
        ///////////////jButton1.setAction(actionMap.get("ConnectTo")); // NOI18N
        //org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(chatclient.ChatClientApp.class).getContext().getResourceMap(ChatClientConnectBox.class);
        jButton1.setText("Connect"); // NOI18N
        jButton1.setName("jButton1"); // NOI18N


        jButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                test();
            }
        });

        //////////jButton2.setAction(actionMap.get("refreshList")); // NOI18N
        jButton2.setText("Refresh");
        jButton2.setName("jButton2"); // NOI18N

        jLabel1.setText("Username");
        jLabel1.setName("jLabel1"); // NOI18N

        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Room Name", "Members", "Hostname", "Password Protected"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setName("jTable1"); // NOI18N
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            jButton1.doClick();
        }
    }//GEN-LAST:event_jTextField2KeyPressed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            	ServerBrowserBox dialog = new ServerBrowserBox(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    public String getHostnameText()
    {
        if(jTable1.getSelectedRow() >= 0)
        return (String)jTable1.getValueAt(jTable1.getSelectedRow(),2);
        else
        return null;
    }
    public boolean getPasswordProtected()
    {
        if(jTable1.getSelectedRow() >= 0)
        return (Boolean)jTable1.getValueAt(jTable1.getSelectedRow(),3);
        else
        return false;
    }

    
    public void refreshList()
    {
        clearJTable();
        serverBrowserItems.clear();
        try
        {
            DatagramSocket ds = new DatagramSocket();
            String sent = "SEARCH:" + InetAddress.getLocalHost().getHostName();
            System.out.println(sent);
            DatagramPacket p = new DatagramPacket(sent.getBytes(),sent.length(),InetAddress.getByName("255.255.255.255"),4444);
            ds.send(p);
        }
        catch(Exception e)
        {
            e.printStackTrace(System.out);
        }
    }

    public void UDPPacketIn(byte[] buff)
    {
        String in = new String(buff).trim();

        serverBrowserItems.add(in.substring(in.indexOf(":")+1,in.length()));
        updateJTable();
    }
    public void clearJTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
    }

    public void updateJTable()
    {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        clearJTable();
        for(String s : serverBrowserItems)
        {
            Object[] add = new Object[4];
            String str = s;
            add[0] = str.substring(0,str.indexOf(":"));
            str = str.substring(str.indexOf(":")+1,str.length());
            add[1] = str.substring(0,str.indexOf(":"));
            str = str.substring(str.indexOf(":")+1,str.length());
            add[2] = str.substring(0,str.indexOf(":"));
            str = str.substring(str.indexOf(":")+1,str.length());
            add[3] = Boolean.valueOf(str.substring(0, str.length()));
            dtm.addRow(add);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

}
